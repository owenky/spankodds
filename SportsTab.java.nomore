import javafx.scene.Scene;
import javafx.scene.control.TabPane;
import javafx.scene.control.Tab;
import javafx.scene.control.Label;
import javafx.scene.layout.VBox;
import javafx.stage.Stage;
import javax.swing.SwingUtilities;
import javafx.embed.swing.SwingNode;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javafx.event.*;
import java.text.SimpleDateFormat;
import java.util.Vector;
import java.util.Date;
public class SportsTab extends Tab
{


Vector gamesIdVec;
Vector gamegroupvec;
Vector gamegroupheadervec;
Vector currentvec;
Vector inprogressgames;
Vector finalgames;
Vector halftimegames;
Vector datamodels;

public MainScreen mainscreen;
public JTable table;	
public LinesTableData dataModel;	
//public SwingNode swingNode;
public long cleartime;
boolean firsttime = true;

SportsTabPane myParent = null;




		public SportsTab(String text,SportsTabPane myParent)
		{
			super(text);
			this.myParent = myParent;
			this.setClosable(false);
			cleartime = (new java.util.Date()).getTime();
			//swingNode = myParent.swingNode;
			init();

			
		}
		
		public void firedatamodels()
		{
			for (int i =0;i <datamodels.size();i++)
			{
				LinesTableData ltd = (LinesTableData)datamodels.get(i);
				SwingUtilities.invokeLater(new Runnable()
				{
				public void run()
				{
					ltd.fireTableDataChanged();
				}
				});	
				
			}
		}
		public long getCleartime()
		{
			long x = 200;
			try
			{
				for (int i =0;i <datamodels.size();i++)
				{
					LinesTableData ltd = (LinesTableData)datamodels.get(i);
					x = ltd.getClearTime();
				}
			}
			catch(Exception ex) {}
			//System.out.println("returning cleartime="+x);
			return x;
		}		
		
		public void setClearTime(long ct)
		{
			cleartime = ct;
		}
		
		public void create()
		{
					
					gamegroupvec = new Vector();
					gamegroupheadervec = new Vector();
					currentvec = new Vector();
					gamesIdVec = new Vector();
					
					inprogressgames = new Vector();
					finalgames = new Vector();
					halftimegames = new Vector();
					datamodels = new Vector();
					
					System.out.println("IM SELECTED="+getText());
					Vector allgameids = AppController.getGamesIdVec();
					Vector allsports = AppController.getSportsVec();
					java.util.Date today = new java.util.Date();
					System.out.println("SPORTSTAB="+getText());
					String lastdate = null;

					
					SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");

					
					
					for(int k =0;k< allgameids.size(); k++)
					{
						String gameid= (String)allgameids.get(k);
						
						Game g = AppController.getGame(gameid);
						
						
						if(g == null)
						{
							System.out.println("skipping gameid="+gameid+"...cuz of null game");
							continue;
						}						
						if(g.getGamedate() == null)
						{
							System.out.println("skipping gameid="+gameid+"...cuz of null game date");
							continue;
						}
						String gamedate = sdf.format(g.getGamedate());
						int leagueid = g.getLeague_id();
						Sport s = AppController.getSport(""+leagueid);
												
						
						
						//System.out.println(s.getSportname());
						if(s == null)
						{
							System.out.println("skipping "+leagueid+"...cuz of null sport");
							continue;
						}
						if(s.getSportname().equalsIgnoreCase(getText()))
						{
							BestLines.calculatebestall(g.getGame_id());
							if(g.getStatus().equalsIgnoreCase("Cncld") || g.getStatus().equalsIgnoreCase("Poned") || g.getStatus().equalsIgnoreCase("Final")
							|| 	g.getStatus().equalsIgnoreCase("Win") || (g.getTimeremaining() != null && g.getTimeremaining().equalsIgnoreCase("Win"))
							
							)
							{
								
								finalgames.add(gameid);
							}
							
							else if(g.getStatus() != null && !g.getStatus().equalsIgnoreCase("NULL") && !g.getStatus().equals(""))
							{
								inprogressgames.add(gameid);
							}

							
							
							else if(lastdate == null) // new date
							{
								gamegroupheadervec.add(s.getLeaguename()+" "+g.getGamedate());
								lastdate = gamedate;
								Vector v = new Vector();
								gamegroupvec.add(v);
								v.add(gameid);
								currentvec = v;
							}
							else if(!lastdate.equals(gamedate)) // new date
							{
								System.out.println("newdate!...lastdate="+lastdate+"..gamedate="+g.getGamedate());
								lastdate = gamedate;
								gamegroupheadervec.add(s.getLeaguename()+" "+g.getGamedate());
								Vector v2 = new Vector();
								v2.add(gameid);
								gamegroupvec.add(v2);
								currentvec = v2;								
							}
							else // same date
							{
								currentvec.add(gameid);
								
							}
							
						  }
						
						
						}
					if(inprogressgames.size() > 0)
					{
					gamegroupheadervec.add("In Progress");
					gamegroupvec.add(inprogressgames);
					}
					if(finalgames.size() > 0)
					{
					gamegroupheadervec.add("FINAL");
					gamegroupvec.add(finalgames);
					}					
					
					//System.out.println("SIZES.."+gamegroupvec.size()+"..."+gamegroupheadervec.size());
					if(gamegroupvec.size() == 0)
					{
						setContent(new Label("No Games"));
						
					}
					else
					{
					
					createAndSetSwingContent(myParent.swingNode);
					//System.out.println("this="+this);
					setContent(myParent.swingNode);
					
					// moving this to create part below firedatamodels(); 
					}
				   			
			
			
			
		}
		
		
		public void destroy()
		{
			
			//System.out.println("IM NOT SELECTED="+getText());

			cleartime = getCleartime();
			
			//System.out.println("IM NOT SELECTED="+getText()+"..");
			//System.out.println("============"+getText()+"===========cleartime killing="+new java.util.Date(cleartime));
			//AppController.removeDataModel(dataModel);
			AppController.removeDataModels(datamodels);
			
			
			if(mainscreen != null)
			{
				
				mainscreen.destroyMe();
				
				
			}	
			mainscreen = null;
			
			gamegroupvec = null;
			gamegroupheadervec = null;
			currentvec = null;
			gamesIdVec = null;
			
			inprogressgames = null;
			finalgames = null;
			halftimegames = null;
			datamodels = null;
			FireThreadManager.emptyIt();
			myParent.swingNode.setContent(null);
			setContent(null);
			
			//System.gc();						
			
			
		}
		
		public void init()
		{

			
			this.setOnSelectionChanged(new EventHandler<Event>() {
            @Override
            public void handle(Event t) {
				//System.out.println("IN TAB"+getText());
                if (isSelected()) //create and show
				{

				  create(); 
				   
                }
				else //destroy
				{
	
					destroy();
				
				}
            }
        });
			
			
			
			
		}
		
		
		
		private void createAndSetSwingContent(SwingNode swingNode) 
		{
			try
			{
             SwingUtilities.invokeAndWait(new Runnable() { // needs to be invokeandwait!!!!
		   //  SwingUtilities.invokeLater(new Runnable() { // needs to be invokeandwait!!!!
                 @Override
                 public void run() {
					 //frame = new StocksTable();
					// System.out.println("inside createswingnode!");
					 
					 long ct = AppController.getClearAllTime();
					 if(ct > cleartime) { cleartime = ct; }
					//System.out.println("=========="+getText()+"======cleartime adding="+new java.util.Date(cleartime));
					
					
					// here i need to check if mainscreen exists already then maybe i can update vectors inside it?
					
					  mainscreen = new MainScreen(gamegroupvec,gamegroupheadervec,cleartime);
					 // System.out.println("after mainscreen initilization");
					  datamodels = mainscreen.getDataModels();
					  
					  //if(firsttime)
					  //{
						AppController.addDataModels(datamodels);
						myParent.setDataModels(datamodels);
						firsttime = false;
					  //}
					    swingNode.setContent(mainscreen);
					 	System.out.println("datamodels size="+AppController.getDataModels().size());
						firedatamodels(); 						
					 //AppController.setLinesTable(scrollpane);
					 //AppController.setLinesTableData(m_data);
						
                 }
             });
			}
			catch(Exception ex)
			{
				System.out.println("exception gggddd"+ex);
			}
         }
		 
		 
}
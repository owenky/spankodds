/** 
 *  Copyright 1999-2002 Matthew Robinson and Pavel Vorobiev. 
 *  All Rights Reserved. 
 * 
 *  =================================================== 
 *  This program contains code from the book "Swing" 
 *  2nd Edition by Matthew Robinson and Pavel Vorobiev 
 *  http://www.spindoczine.com/sbe 
 *  =================================================== 
 * 
 *  The above paragraph must be included in full, unmodified 
 *  and completely intact in the beginning of any source code 
 *  file that references, copies or uses (in any way, shape 
 *  or form) code contained in this file. 
 */ 

import java.awt.*;
import java.awt.event.*;
import java.util.*;
import java.io.*;
import java.text.*;

import javax.swing.*;
import javax.swing.border.*;
import javax.swing.event.*;
import javax.swing.table.*;

import com.jidesoft.grid.JideTable;
//import com.jidesoft.grid.CellStyle;
//import com.jidesoft.grid.SortableTable;
//import com.jidesoft.grid.TableStyleProvider;
//import com.jidesoft.plaf.LookAndFeelFactory;

public class LinesTable2 extends JScrollPane {
	

  //public JTable m_table;
  public JTable m_table;
 
 // public CellSpanTable m_table;
  public LinesTableData m_data;
  public JLabel m_title;
 public TableColumnManager tcm;
 public TableColumnManager tcm2;
 public TableColumnAdjuster tca;
 public TableColumnAdjuster tca2;
 
 FixedColumnTable fct;
//JScrollPane ps = new JScrollPane();
	
	//public JTable getTable()
	public JTable getTable()
	{
		return m_table;
	}
	
	
	//public void setTable(JTable t)
	public void setTable(JTable t)
	{
		m_table = t;
	}
	public LinesTableData getDataModel()
	{
		return m_data;
	}
	public void setDataModel(LinesTableData t)
	{
		m_data = t;
	}	
	
	public void adjustColumns(boolean onlyadjustlarger)
	{

		if(tcm == null)
		{
			tcm = new TableColumnManager(m_table,"");
		}
	
		if(tca == null)
		{
			tca = new TableColumnAdjuster(m_table);
		}

		
		tca.adjustColumns();
		if(fct == null)
		{
			
			fct = new FixedColumnTable(AppController.getNumFixedCols(), this);
			fct.getFixedTable().setRowHeight(30);
			//jide table feature fct.getFixedTable().setRowAutoResizes(true);
			tcm2 = new TableColumnManager(fct.getFixedTable(),"fixed");
			//((CellSpanTable)fct.getFixedTable()).setAutoCellMerge(CellSpanTable.AUTO_CELL_MERGE_COLUMNS);
			
		}
		Vector hiddencols = AppController.getHiddenCols();
		for(int j=0;j<hiddencols.size();j++)
		{
			Bookie b = (Bookie)hiddencols.get(j);
			//System.out.println("hiding "+b);
			tcm.hideColumn(b);
		}
		
	}
	

  public LinesTable2() {
    
    

	UIManager.put("Table.focusCellHighlightBorder",	new LineBorder(Color.black, 0));

	//System.out.println("aaa");
    
//System.out.println("bbb");

 
	

	//m_table = new JTable();
	m_table = new JTable();
	
	//m_table.setAutoCellMerge(CellSpanTable.AUTO_CELL_MERGE_COLUMNS);
	/*
    m_table = new JTable(){
			public Component prepareRenderer(TableCellRenderer renderer, int row, int column) {
            Component returnComp = super.prepareRenderer(renderer, row, column);
            Color alternateColor = Color.YELLOW; // new Color(204, 255, 229);
            Color whiteColor = Color.WHITE;
            if(!returnComp.getBackground().equals(getSelectionBackground())) {
               Color c = (row % 2 == 0 ? alternateColor : whiteColor);
               returnComp.setBackground(c);
               c = null;
            }
            return returnComp;
         }
      };
	  */
//System.out.println("bbba");
    m_table.setOpaque(true);
  	m_table.setPreferredScrollableViewportSize(m_table.getPreferredSize());
	m_table.changeSelection(0, 0, false, false);
  
    m_table.setAutoCreateColumnsFromModel(false);
	m_table.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
	
	

	
	
	//System.out.println("bbbb");
    
	//System.out.println("bbbc");
		
		
		User user = AppController.getUser();
		String bookiecolumnprefs = user.getBookieColumnPrefs();
		String fixedcolumnprefs = user.getFixedColumnPrefs();
		//System.out.println("BCM="+bookiecolumnprefs);
		
		
		Vector newBookiesVec = AppController.getBookiesVec();
    for (int k = 0; k < newBookiesVec.size(); k++) 
	{
		Bookie b = (Bookie)newBookiesVec.get(k);
		LineRenderer lr = new LineRenderer() {
			@Override
            public void paintComponent(final Graphics g) {
                // call parent method
                super.paintComponent(g);
				g.setColor(Color.GREEN);
				
           
            }
        };
		
		
		
		//lr.setBackground(Color.BLUE);
		//System.out.print(" bbbd "+k+" ");
		//lr.setHorizontalAlignment(LinesTableData.m_columns.get(k).m_alignment);
      //renderer.setHorizontalAlignment(LinesTableData.m_columns.get(k).m_alignment);
	  TableColumn column;
	 
		 //column = new TableColumn(k,m_data.m_columns.get(k).m_width, lr, null);
		 column = new TableColumn(k,30, lr, null);
		 column.setHeaderValue(b+"");
		 column.setIdentifier(""+b.getBookie_id());
	  
	
	 
      
      m_table.addColumn(column);
	 
	 
	//  System.out.println("bbbe"); 
	/*	
	  if(bookiecolumnprefs.indexOf(""+b.getBookie_id()+",") == -1)
	  {
		  System.out.print("bout to hide "+b.getBookie_id()+"  at "+k+" ");
		tcm.hideColumn(k);
	  }
	  */
	  
    }

  
	
	
	    this.getViewport().setBackground(m_table.getBackground());
		this.getViewport().add(m_table);
		
	    m_table.setRowHeight(30);
		//jidetable feautre m_table.setRowAutoResizes(true);
	

	
	/*
	JPanel panel = new JPanel();
	panel.setLayout(new BoxLayout(panel, BoxLayout.Y_AXIS));
	panel.add(m_table);
	panel.add(m_table2);
	
			
		
   
       this.getViewport().add(panel);    
        */  	
	

	
	
	
	
	
	
	
	
	
    //getContentPane().add(ps, BorderLayout.CENTER);
	
	//packTable();
	
	//m_table.getColumnModel().addColumnModelListener(m_data);

//System.out.println("bbbf");
	

	/*
	 m_table.getModel().addTableModelListener(new TableModelListener() {
            public void tableChanged(TableModelEvent e) {
                ColumnsAutoSizer.sizeColumnsToFit(m_table);
            }
        });
	
	*/

	
	

	

	
	
  }


  
public void addColumn(int bookieid)
{
	
	/*
TableColumn tc = m_data.addColumn(bookieid);
m_data.tablecolumnhash.put(""+bookieid,tc);	
m_table.addColumn(tc); 
m_table.tableChanged(new TableModelEvent(m_data)); 
m_table.repaint();
*/
//tcm.showColumn(m_data.getBookie(bookieid));
tcm.showColumn(AppController.getBookie(bookieid));
}  
public void removeColumn(int bookieid)
{
	/*
TableColumn tc = m_data.removeColumn(bookieid);
m_table.removeColumn(tc); 
m_data.tablecolumnhash.remove(""+bookieid);	
m_table.tableChanged(new TableModelEvent(m_data)); 
m_table.repaint();
*/
//tcm.hideColumn(m_data.getBookie(bookieid));
tcm.hideColumn(AppController.getBookie(bookieid));

}  
  
    private void packTable() {
        TableColumnModel columnModel = m_table.getColumnModel();
        int columnCount = m_table.getColumnCount();
        int rowCount = m_table.getRowCount();
        int[][] preferredHeights = new int[columnCount][rowCount];
        TableCellRenderer renderer;
        Component comp;
        for (int col = 0; col < columnCount; col++) {
            renderer = columnModel.getColumn(col).getCellRenderer();
            if (renderer == null) {
                renderer = m_table.getDefaultRenderer(m_data.getColumnClass(col));
            }
            for (int row = 0; row < rowCount; row++) {
                comp = renderer.getTableCellRendererComponent(m_table,
                    m_data.getValueAt(row, col), false, false, row, col);
                preferredHeights[col][row] = (int) comp.getPreferredSize().getHeight();
            }
        }
        for (int row = 0; row < rowCount; row++) {
            int pref = 0;
            for (int col = 0; col < columnCount; col++) {
                pref = Math.max(pref, preferredHeights[col][row]);
            }
            m_table.setRowHeight(row, pref);
        }
    }
	
	
  
  
}










